{"version":3,"sources":["Todo.js","Input.js","Delete.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_this$props","this","props","text","done","onClick","react_default","a","createElement","className","undefined","Component","Input","name","type","placeholder","onKeyUp","onEnter","Delete","count","App","state","gifts","_this","load","toggleDone","index","newGifts","Object","toConsumableArray","slice","concat","objectSpread","setState","deleteListItem","event","key","addNewGift","target","value","_this2","save","Counter_Todo","Input_Input","map","gift","Todo_Todo","Delete_Delete","localStorage","setItem","JSON","stringify","parse","getItem","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cdffac45.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Todo.css'\n\nexport default class Todo extends Component {\n  render() {\n    const { text, done, onClick } = this.props\n    return (\n      <li onClick={onClick} className={done ? 'done' : undefined}>\n        {text}\n      </li>\n    )\n  }\n}\n\n//\n","import React, { Component } from 'react'\nimport './Input.css'\n\nexport default class Input extends Component {\n  render() {\n    return (\n      <input\n        name=\"gift-input\"\n        type=\"text\"\n        placeholder=\"Add Wishes Here...\"\n        onKeyUp={this.props.onEnter}\n      />\n    )\n  }\n}\n\n//\n","import React, { Component } from 'react'\nimport './Delete.css'\n\nexport default class Delete extends Component {\n  render() {\n    return <button onClick={this.props.onClick}> &times;</button>\n  }\n}\n\n//\n","import React, { Component } from 'react'\nimport './Counter.css'\n\nexport default class Todo extends Component {\n  render() {\n    return <div>{this.props.count}</div>\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport Todo from './Todo'\nimport Input from './Input'\nimport Delete from './Delete'\nimport Counter from './Counter'\n\nclass App extends Component {\n  state = {\n    gifts: this.load()\n  }\n\n  toggleDone = index => {\n    const { gifts } = this.state\n    const newGifts = [\n      ...gifts.slice(0, index),\n      { ...gifts[index], done: !gifts[index].done },\n      ...gifts.slice(index + 1)\n    ]\n\n    this.setState({\n      gifts: newGifts\n    })\n  }\n\n  onEnter(event) {\n    if (event.key === 'Enter') {\n      this.addNewGift(event)\n      event.target.value = ''\n    }\n  }\n\n  addNewGift(event) {\n    const { gifts } = this.state\n    const newGifts = [{ text: event.target.value, done: false }, ...gifts]\n    this.setState({\n      gifts: newGifts\n    })\n  }\n\n  deleteListItem = index => {\n    const { gifts } = this.state\n    const newGifts = [...gifts.slice(0, index), ...gifts.slice(index + 1)]\n\n    this.setState({\n      gifts: newGifts\n    })\n  }\n\n  render() {\n    this.save()\n    return (\n      <div className=\"container\">\n        <Counter />\n        <Input onEnter={event => this.onEnter(event)} />\n        <ul>\n          {this.state.gifts.map((gift, index) => (\n            <div className=\"listItem\" key={`listItem${index}`}>\n              <Todo\n                key={`todo${index}`}\n                text={gift.text}\n                done={gift.done}\n                onClick={() => this.toggleDone(index)}\n              />\n              <Delete\n                key={`delete${index}`}\n                onClick={() => this.deleteListItem(index)}\n              />\n            </div>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n\n  save() {\n    localStorage.setItem('todo-app--gifts', JSON.stringify(this.state.gifts))\n  }\n\n  load() {\n    try {\n      return JSON.parse(localStorage.getItem('todo-app--gifts')) || []\n    } catch (err) {\n      return []\n    }\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}